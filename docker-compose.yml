version: '3.8'

services:
  # PostgreSQL 데이터베이스
  postgres:
    image: postgres:15-alpine
    container_name: handoc-postgres
    environment:
      POSTGRES_DB: handoc_ai
      POSTGRES_USER: handoc_user
      POSTGRES_PASSWORD: handoc_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/sql/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - handoc-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U handoc_user -d handoc_ai"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis 캐시 및 큐
  redis:
    image: redis:7-alpine
    container_name: handoc-redis
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - handoc-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # MinIO (S3 호환 객체 스토리지)
  minio:
    image: minio/minio:latest
    container_name: handoc-minio
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: handoc_minio
      MINIO_ROOT_PASSWORD: handoc_minio_password
    volumes:
      - minio_data:/data
    ports:
      - "9000:9000"
      - "9001:9001"
    networks:
      - handoc-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 10s
      retries: 3

  # FastAPI 백엔드
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: handoc-backend
    environment:
      # 데이터베이스 설정
      DATABASE_URL: postgresql://handoc_user:handoc_password@postgres:5432/handoc_ai
      
      # Redis 설정
      REDIS_URL: redis://redis:6379/0
      
      # MinIO 설정
      S3_ENDPOINT: http://minio:9000
      S3_ACCESS_KEY: handoc_minio
      S3_SECRET_KEY: handoc_minio_password
      S3_BUCKET_NAME: handoc-files
      
      # JWT 설정
      SECRET_KEY: your-super-secret-key-change-in-production
      ALGORITHM: HS256
      ACCESS_TOKEN_EXPIRE_MINUTES: 1440
      
      # OpenAI 설정
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      
      # Google Drive 설정 (선택적)
      GDRIVE_SERVICE_JSON: ${GDRIVE_SERVICE_JSON}
      
      # 앱 설정
      DEBUG: "true"
      CORS_ORIGINS: "http://localhost:3000,http://localhost:3001"
      MAX_FILE_SIZE: 10485760  # 10MB
      ALLOWED_FILE_TYPES: "application/pdf"
      
    volumes:
      - ./backend:/app
      - uploaded_files:/app/uploads
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
    networks:
      - handoc-network
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # React 프론트엔드
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: handoc-frontend
    environment:
      REACT_APP_API_URL: http://localhost:8000/api/v1
      REACT_APP_WS_URL: ws://localhost:8000/ws
      GENERATE_SOURCEMAP: "false"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    ports:
      - "3000:3000"
    depends_on:
      - backend
    networks:
      - handoc-network
    command: npm start
    stdin_open: true
    tty: true

  # Nginx 리버스 프록시 (프로덕션용)
  nginx:
    image: nginx:alpine
    container_name: handoc-nginx
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - backend
      - frontend
    networks:
      - handoc-network
    profiles:
      - production

  # Celery Worker (백그라운드 작업 처리)
  celery-worker:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: handoc-celery-worker
    environment:
      DATABASE_URL: postgresql://handoc_user:handoc_password@postgres:5432/handoc_ai
      REDIS_URL: redis://redis:6379/0
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      S3_ENDPOINT: http://minio:9000
      S3_ACCESS_KEY: handoc_minio
      S3_SECRET_KEY: handoc_minio_password
      S3_BUCKET_NAME: handoc-files
    volumes:
      - ./backend:/app
      - uploaded_files:/app/uploads
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - handoc-network
    command: celery -A app.worker worker --loglevel=info
    profiles:
      - production

  # Celery Beat (스케줄러)
  celery-beat:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: handoc-celery-beat
    environment:
      DATABASE_URL: postgresql://handoc_user:handoc_password@postgres:5432/handoc_ai
      REDIS_URL: redis://redis:6379/0
    volumes:
      - ./backend:/app
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - handoc-network
    command: celery -A app.worker beat --loglevel=info
    profiles:
      - production

  # Flower (Celery 모니터링)
  flower:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: handoc-flower
    environment:
      REDIS_URL: redis://redis:6379/0
    ports:
      - "5555:5555"
    depends_on:
      - redis
    networks:
      - handoc-network
    command: celery -A app.worker flower --port=5555
    profiles:
      - monitoring

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  minio_data:
    driver: local
  uploaded_files:
    driver: local

networks:
  handoc-network:
    driver: bridge

# 개발 환경 오버라이드
# docker-compose -f docker-compose.yml -f docker-compose.dev.yml up
---
# docker-compose.dev.yml
version: '3.8'

services:
  backend:
    environment:
      DEBUG: "true"
      LOG_LEVEL: DEBUG
    volumes:
      - ./backend:/app:delegated
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload --log-level debug

  frontend:
    environment:
      CHOKIDAR_USEPOLLING: "true"
      FAST_REFRESH: "true"
    volumes:
      - ./frontend:/app:delegated
      - /app/node_modules

# 프로덕션 환경 오버라이드
# docker-compose -f docker-compose.yml -f docker-compose.prod.yml up
---
# docker-compose.prod.yml
version: '3.8'

services:
  postgres:
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_prod_data:/var/lib/postgresql/data

  redis:
    command: redis-server --requirepass ${REDIS_PASSWORD}

  backend:
    environment:
      DEBUG: "false"
      SECRET_KEY: ${SECRET_KEY}
      DATABASE_URL: postgresql://handoc_user:${POSTGRES_PASSWORD}@postgres:5432/handoc_ai
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379/0
    command: gunicorn app.main:app -w 4 -k uvicorn.workers.UvicornWorker --bind 0.0.0.0:8000

  frontend:
    build:
      args:
        NODE_ENV: production
    environment:
      NODE_ENV: production

volumes:
  postgres_prod_data:
    driver: local

